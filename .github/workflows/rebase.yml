name: OrangeFox - Build

# Credits to:
# https://github.com/TeamWin
# https://gitlab.com/OrangeFox
# https://github.com/azwhikaru for Recovery Builder Template
# And all Contributors in every repositories I used

on:
  workflow_dispatch:
    inputs:
      MANIFEST_BRANCH:
        description: 'OrangeFox Manifest Branch'
        required: true
        default: '12.1'
        type: choice
        options:
          - 12.1
          - 11.0
      DEVICE_TREE:
        description: 'OrangeFox Device Tree'
        required: true
        default: 'https://github.com/SakuraKyuo/device_oneplus_giulia-TWRP'
      DEVICE_TREE_BRANCH:
        description: 'OrangeFox Device Tree Branch'
        required: true
        default: 'android-12.1'
      DEVICE_PATH:
        description: 'Specify your Device Path'
        required: true
        default: 'device/oneplus/giulia'
      DEVICE_NAME:
        description: 'Specify your Device Codename'
        required: true
        default: 'giulia'
      BUILD_TARGET:
        description: 'Specify your Build Target'
        required: true
        default: 'recovery'
        type: choice
        options:
          - boot
          - recovery
          - vendorboot

jobs:
  build:
    name: Build OrangeFox Recovery by ${{ github.actor }}
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      # Checkout the workflow repository
      - name: Checkout
        uses: actions/checkout@v4

      # Clean up the runner to free disk space
      - name: Clean-up
        uses: rokibhasansagar/slimhub_actions@main

      # Set up swap space to prevent memory issues during compilation
      - name: Swap Space
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 24

      # Install build dependencies and set up the environment
      - name: Build Environment
        run: |
          sudo apt update
          sudo apt install aria2 bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop maven pngcrush python3 python3-venv rsync schedtool squashfs-tools xsltproc zip zlib1g-dev -y
          git clone https://gitlab.com/OrangeFox/misc/scripts.git -b master
          cd scripts
          sudo bash setup/android_build_env.sh || { echo "Error: android_build_env.sh failed"; cat setup/android_build_env.sh | grep -C 5 error || true; exit 1; }

      # Initialize the OrangeFox manifest
      - name: Set-up Manifest
        if: inputs.MANIFEST_BRANCH == '11.0' || inputs.MANIFEST_BRANCH == '12.1'
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/OrangeFox
          cd ${GITHUB_WORKSPACE}/OrangeFox
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
          git clone https://gitlab.com/OrangeFox/sync.git -b master
          cd sync
          ./orangefox_sync.sh --branch ${{ inputs.MANIFEST_BRANCH }} --path ${GITHUB_WORKSPACE}/OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }} || { echo "Error: orangefox_sync.sh failed"; cat orangefox_sync.log || true; exit 1; }

      # Clone the device tree
      - name: Clone Device Tree
        run: |
          cd ${GITHUB_WORKSPACE}/OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }}
          git clone ${{ inputs.DEVICE_TREE }} -b ${{ inputs.DEVICE_TREE_BRANCH }} ./${{ inputs.DEVICE_PATH }}
          cd ${{ inputs.DEVICE_PATH }}
          echo "COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Patch all .mk files to add OrangeFox variables, prioritizing twrp_giulia.mk
      - name: Patch Device Tree for OrangeFox Variables
        run: |
          cd ${GITHUB_WORKSPACE}/OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }}/${{ inputs.DEVICE_PATH }}
          echo "Listing all files in device tree directory (${{ inputs.DEVICE_PATH }}):"
          ls -la
          echo "Checking twrp_${{ inputs.DEVICE_NAME }}.mk"
          if [ -f twrp_${{ inputs.DEVICE_NAME }}.mk ]; then
            echo "twrp_${{ inputs.DEVICE_NAME }}.mk found, contents:"
            cat twrp_${{ inputs.DEVICE_NAME }}.mk
            if ! grep -q "vendor/.*config/common.mk" twrp_${{ inputs.DEVICE_NAME }}.mk; then
              echo "Warning: twrp_${{ inputs.DEVICE_NAME }}.mk does not inherit vendor/twrp or vendor/orangefox, fixing it"
              sed -i '/inherit-product.*full_base.mk/a $(call inherit-product, vendor/twrp/config/common.mk)' twrp_${{ inputs.DEVICE_NAME }}.mk
              echo "Updated twrp_${{ inputs.DEVICE_NAME }}.mk contents:"
              cat twrp_${{ inputs.DEVICE_NAME }}.mk
            fi
          else
            echo "Error: twrp_${{ inputs.DEVICE_NAME }}.mk not found"
            exit 1
          fi
          echo "Searching for .mk files to patch OrangeFox variables..."
          patched=false
          if [ -f twrp_${{ inputs.DEVICE_NAME }}.mk ]; then
            echo "Checking twrp_${{ inputs.DEVICE_NAME }}.mk for OrangeFox variables"
            if ! grep -q "TW_MAX_BRIGHTNESS" twrp_${{ inputs.DEVICE_NAME }}.mk; then
              echo -e "\n# OrangeFox settings\nTW_MAX_BRIGHTNESS := 255\nTW_DEFAULT_BRIGHTNESS := 128\nTW_THEME := portrait_hdpi\nTW_INCLUDE_CRYPTO := true" >> twrp_${{ inputs.DEVICE_NAME }}.mk
              echo "Added OrangeFox variables to twrp_${{ inputs.DEVICE_NAME }}.mk"
              patched=true
            else
              echo "TW_MAX_BRIGHTNESS already defined in twrp_${{ inputs.DEVICE_NAME }}.mk"
              patched=true
            fi
          fi
          if [ "$patched" = false ]; then
            for mk_file in $(find . -maxdepth 1 -type f -name "*.mk" ! -name "twrp_${{ inputs.DEVICE_NAME }}.mk"); do
              mk_file=$(basename "$mk_file")
              echo "Checking $mk_file for OrangeFox variables"
              if ! grep -q "TW_MAX_BRIGHTNESS" "$mk_file"; then
                echo -e "\n# OrangeFox settings\nTW_MAX_BRIGHTNESS := 255\nTW_DEFAULT_BRIGHTNESS := 128\nTW_THEME := portrait_hdpi\nTW_INCLUDE_CRYPTO := true" >> "$mk_file"
                echo "Added OrangeFox variables to $mk_file"
                patched=true
              else
                echo "TW_MAX_BRIGHTNESS already defined in $mk_file"
              fi
            done
          fi
          if [ ! -n "$(find . -maxdepth 1 -type f -name '*.mk')" ]; then
            echo "No .mk files found in ${{ inputs.DEVICE_PATH }}. Creating orangefox.mk"
            echo -e "# OrangeFox Recovery configuration\nTW_MAX_BRIGHTNESS := 255\nTW_DEFAULT_BRIGHTNESS := 128\nTW_THEME := portrait_hdpi\nTW_INCLUDE_CRYPTO := true" > orangefox.mk
            patched=true
          fi
          if [ "$patched" = false ] && [ -n "$(find . -maxdepth 1 -type f -name '*.mk')" ]; then
            echo "Warning: TW_MAX_BRIGHTNESS was already defined in all .mk files"
          elif [ "$patched" = false ]; then
            echo "Error: No .mk files found and unable to create orangefox.mk"
            exit 1
          fi

      # Build OrangeFox Recovery
      - name: Building OrangeFox
        run: |
          cd ${GITHUB_WORKSPACE}/OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }}
          echo "Checking if build/envsetup.sh exists"
          if [ -f build/envsetup.sh ]; then
            echo "build/envsetup.sh found"
          else
            echo "Error: build/envsetup.sh not found"
            exit 1
          fi
          echo "Checking if ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk exists"
          if [ -f ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk ]; then
            echo "AndroidProducts.mk found, contents:"
            cat ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk
            if ! grep -q "COMMON_LUNCH_CHOICES.*twrp_${{ inputs.DEVICE_NAME }}-eng" ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk; then
              echo "Warning: AndroidProducts.mk does not contain twrp_${{ inputs.DEVICE_NAME }}-eng, fixing it"
              echo -e "PRODUCT_MAKEFILES := \$(LOCAL_DIR)/twrp_${{ inputs.DEVICE_NAME }}.mk\nCOMMON_LUNCH_CHOICES := twrp_${{ inputs.DEVICE_NAME }}-eng" > ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk
              echo "Updated AndroidProducts.mk contents:"
              cat ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk
            fi
          else
            echo "Warning: AndroidProducts.mk not found, creating with twrp_${{ inputs.DEVICE_NAME }}-eng"
            echo -e "PRODUCT_MAKEFILES := \$(LOCAL_DIR)/twrp_${{ inputs.DEVICE_NAME }}.mk\nCOMMON_LUNCH_CHOICES := twrp_${{ inputs.DEVICE_NAME }}-eng" > ${{ inputs.DEVICE_PATH }}/AndroidProducts.mk
          fi
          echo "Checking if ${{ inputs.DEVICE_PATH }}/vendorsetup.sh exists"
          if [ -f ${{ inputs.DEVICE_PATH }}/vendorsetup.sh ]; then
            echo "vendorsetup.sh found, contents:"
            cat ${{ inputs.DEVICE_PATH }}/vendorsetup.sh
            if grep -q "add_lunch_combo" ${{ inputs.DEVICE_PATH }}/vendorsetup.sh; then
              echo "Warning: vendorsetup.sh contains obsolete add_lunch_combo, clearing it"
              echo "" > ${{ inputs.DEVICE_PATH }}/vendorsetup.sh
              echo "Updated vendorsetup.sh contents:"
              cat ${{ inputs.DEVICE_PATH }}/vendorsetup.sh
            fi
          fi
          echo "Sourcing build/envsetup.sh with debug output"
          set -x  # Enable shell debugging
          source build/envsetup.sh || { echo "Error: Sourcing build/envsetup.sh failed"; tail -n 50 build/envsetup.sh; ls -la vendor/*/build/envsetup.sh || true; exit 1; }
          set +x  # Disable shell debugging
          export ALLOW_MISSING_DEPENDENCIES=true
          echo "Available lunch targets:"
          lunch | grep twrp || echo "No twrp targets found"
          echo "Running lunch twrp_${{ inputs.DEVICE_NAME }}-eng"
          lunch twrp_${{ inputs.DEVICE_NAME }}-eng || { echo "Error: lunch twrp_${{ inputs.DEVICE_NAME }}-eng failed"; cat out/error.log || true; exit 1; }
          echo "Running make clean"
          make clean || { echo "Error: make clean failed"; exit 1; }
          echo "Running mka adbd ${{ inputs.BUILD_TARGET }}image"
          mka adbd ${{ inputs.BUILD_TARGET }}image || { echo "Error: mka adbd ${{ inputs.BUILD_TARGET }}image failed"; cat out/error.log || true; exit 1; }

      # Set release properties (e.g., build date)
      - name: Set Release Properties
        run: |
          echo "BUILD_DATE=$(TZ=Asia/Manila date +%Y%m%d)" >> $GITHUB_ENV
          cd ${GITHUB_WORKSPACE}/OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }}

      # Upload the build artifacts to GitHub Release
      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }}/out/target/product/${{ inputs.DEVICE_NAME }}/OrangeFox*.img
            OrangeFox/fox_${{ inputs.MANIFEST_BRANCH }}/out/target/product/${{ inputs.DEVICE_NAME }}/OrangeFox*.zip
          name: OrangeFox Recovery for ${{ inputs.DEVICE_NAME }} // ${{ env.BUILD_DATE }}
          tag_name: ${{ github.run_id }}
          body: |
            ## OrangeFox Recovery Build - Unofficial
            Build: fox_${{ inputs.MANIFEST_BRANCH }}
            Device: [Device Tree/Branch](${{ inputs.DEVICE_TREE }}/tree/${{ inputs.DEVICE_TREE_BRANCH }})
            Commit: Most recent [commit](${{ inputs.DEVICE_TREE }}/commit/${{ env.COMMIT_ID }}) during building.
